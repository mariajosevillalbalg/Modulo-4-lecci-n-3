import os
from PyQt5.QtWidgets import (
   QApplication, QWidget,
   QFileDialog, # Diálogo para abrir archivos (y carpetas)
   QLabel, QPushButton, QListWidget,
   QHBoxLayout, QVBoxLayout
)


from PyQt5.QtCore import Qt # necesita una constante Qt.KeepAspectRatio para cambiar tamaño y mantener las proporciones
from PyQt5.QtGui import QPixmap # pantalla optimizada


from PIL import Image


app = QApplication([])
win = QWidget()       
win.resize(700, 500) 
win.setWindowTitle('Editor simple')
lb_image = QLabel("Imagen")
btn_dir = QPushButton("Carpeta")
lw_files = QListWidget()


btn_left = QPushButton("Izquierda")
btn_right = QPushButton("Derecha")
btn_flip = QPushButton("Reflejo")
btn_sharp = QPushButton("Nitidez")
btn_bw = QPushButton("B/N")


row = QHBoxLayout()          # Línea principal
col1 = QVBoxLayout()         # dividido en dos columnas
col2 = QVBoxLayout()
col1.addWidget(btn_dir)      # en la primera – botón de selección de directorio
col1.addWidget(lw_files)     # y lista de archivos
col2.addWidget(lb_image, 95) # en la segunda – imagen
row_tools = QHBoxLayout()    # y barra de botón
row_tools.addWidget(btn_left)
row_tools.addWidget(btn_right)
row_tools.addWidget(btn_flip)
row_tools.addWidget(btn_sharp)
row_tools.addWidget(btn_bw)
col2.addLayout(row_tools)


row.addLayout(col1, 20)
row.addLayout(col2, 80)
win.setLayout(row)


win.show()


workdir = ''


def filter(files, extensions):
   result = []
   for filename in files:
       for ext in extensions:
           if filename.endswith(ext):
               result.append(filename)
   return result


def chooseWorkdir():
   global workdir
   workdir = QFileDialog.getExistingDirectory()


def showFilenamesList():
   extensions = ['.jpg','.jpeg', '.png', '.gif', '.bmp']
   chooseWorkdir()
   filenames = filter(os.listdir(workdir), extensions)


   lw_files.clear()
   for filename in filenames:
       lw_files.addItem(filename)


btn_dir.clicked.connect(showFilenamesList)


class ImageProcessor():
   def __init__(self):
       self.image = None
       self.dir = None
       self.filename = None
       self.save_dir = "Modificado/"


   def loadImage(self, dir, filename):
       '''Al subir, recordar la ruta y el nombre del archivo'''
       self.dir = dir
       self.filename = filename
       image_path = os.path.join(dir, filename)
       self.image = Image.open(image_path)


   def showImage(self, path):
       lb_image.hide()
       pixmapimage = QPixmap(path)
       w, h = lb_image.width(), lb_image.height()
       pixmapimage = pixmapimage.scaled(w, h, Qt.KeepAspectRatio)
       lb_image.setPixmap(pixmapimage)
       lb_image.show()


workimage = ImageProcessor()


def showChosenImage():
   if lw_files.currentRow() >= 0:
       filename = lw_files.currentItem().text()
       workimage.loadImage(workdir, filename)
       image_path = os.path.join(workimage.dir, workimage.filename)
       workimage.showImage(image_path)


lw_files.currentRowChanged.connect(showChosenImage)


app.exec()
